<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" minWidth="955" minHeight="600" applicationComplete="init()" >
	<fx:Declarations>
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			private var applicationDefault:String = null;
			private var hostDefault:String = null;
			
			private var luaGroup:Test;
			[Bindable] private var mapTests:Array = new Array();
			
			public var _currentIndex:int = 0;
			
			private var _conn:NetConnection = null; // Connection to Mona for getting list of lua tests
			
			// Console functions
			public function INFO(message:String):void { console.htmlText += "<p><font color='#000000'>" + message + "</font></p>"; }
			public function SUCCESS(message:String):void { console.htmlText += "<p><b><font color='#00CC00'>" + message + "</font></b></p>"; }
			public function ERROR(message:String):void { console.htmlText += "<p><b><i><font color='#CC0000'>ERROR : " + message + "</font></i></b></p>"; }
			
			private function init():void {
				// Initiate parameters
				applicationDefault = FlexGlobals.topLevelApplication.parameters.pathname;
				hostDefault = FlexGlobals.topLevelApplication.parameters.host;
				
				INFO("Starting FunctionalTests from host http://" + hostDefault + applicationDefault);
				
				listTests.enabled = false;
				btRun.enabled = false;
				
				var group:Test = new Test(this, "HTTP", "List of HTTP tests", true);
				group.children.push(new HTTPLoad(this, hostDefault, applicationDefault));
				group.children.push(new HTTPReconnect(this, hostDefault, applicationDefault));
				group.children.push(new HTTPBadRequests(this, hostDefault));
				group.children.push(new HTTPAggregated(this, hostDefault, applicationDefault));
				group.children.push(new HTTPSplitted(this, hostDefault, applicationDefault));
				group.children.push(new BigDeserialize(this, hostDefault, applicationDefault));
				group.children.push(new Cookies(this, hostDefault, applicationDefault));
				mapTests.push(group);
				group = new Test(this, "RTMP", "List of RTMP tests", true);
				group.children.push(new RTMPBadRequests(this, hostDefault));
				group.children.push(new RTMPLoad(this, hostDefault, applicationDefault, "RTMP"));
				group.children.push(new RTMPLoad(this, hostDefault, applicationDefault, "RTMPE"));
				// TODO : group.children.push(new RTMPp2p(this, hostDefault, applicationDefault));
				mapTests.push(group);
				group = new Test(this, "RTMFP", "List of RTMFP tests", true);
				group.children.push(new RTMFPLoad(this, hostDefault, applicationDefault));
				mapTests.push(group);
				group = new Test(this, "Other", "List of other tests", true);
				group.children.push(new DeserializationJSON(this, hostDefault, applicationDefault));
				group.children.push(new DeserializationXMLRPC(this, hostDefault, applicationDefault));
				group.children.push(new ParentFunctions(this, hostDefault, applicationDefault));
				mapTests.push(group);
				
				luaGroup = new Test(this, "LUA", "List of LUA server tests", true);
				mapTests.push(luaGroup);
				
				_conn = new NetConnection();
				_conn.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
				_conn.connect("rtmfp://" + hostDefault + applicationDefault);
				_conn.client = this;
			}
			
			// Run selected tests
			private function run():void {
				
				listTests.enabled = false;
				btRun.enabled = false;
				_currentIndex = 0;
				runNext();
			}
			
			// Run current test
			private function runNext():void {
				var items:Array = listTests.selectedItems;
				
				if (_currentIndex < items.length) {
					var test:Test = items[_currentIndex];
					var parent:Test = listTests.getParentItem(test);
					
					// Run if parent is not selected (TODO : recursive)
					if (!parent || !listTests.isItemSelected(parent))
						test.run(onFinished);
					else {
						_currentIndex += 1;
						runNext();
					}
				}
				else {// End of tests!
					listTests.enabled = true;
					btRun.enabled = true;
				}
			}
			
			// Callback, called from a test finished
			public function onFinished(test:Test, response:Object):void {
				
				// Error : End of tests!
				if (response.err) {
					listTests.enabled = true;
					btRun.enabled = true;
				} else { // Success => Go to next Test
					_currentIndex += 1;
					runNext();
				}
			}
			
			private function onStatus(event:NetStatusEvent):void {
				switch(event.info.code) {
					case "NetConnection.Connect.Success":
						_conn.call("listTests",new Responder(onListTests));
						break;
					default:
						Alert.show(event.info.code);
				}
			}
			
			public function onListTests(list:Object):void {
				for (var name:String in list) {
					var test:LUATest = new LUATest(this, name, list[name], _conn);
					luaGroup.children.push(test);
				}
				
				listTests.enabled = true;
				btRun.enabled = true;
			}
			
			public function myDataTipFunction(value:Object):String {
				if (value is Test) {// AS3 Test
					var as3Test:Test = value as Test;
					return as3Test.description;
				} else // LUA Test
					return value.label + " LUA Test";
			}
		]]>
	</fx:Script>	
	<mx:VBox x="10" y="10" width="935" height="580">
		<mx:HBox width="100%">
			<mx:TextArea id="console" width="720" height="518" editable="false"
						 valueCommit="console.verticalScrollPosition=console.maxVerticalScrollPosition"/>
			<mx:Tree id="listTests" width="204" height="517" dataProvider="{mapTests}" allowMultipleSelection="true" 
					 showDataTips="true" dataTipFunction="myDataTipFunction"></mx:Tree>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button id="btRun" label="Run" click="run()"/>
		</mx:HBox>
	</mx:VBox>
</mx:Application>
