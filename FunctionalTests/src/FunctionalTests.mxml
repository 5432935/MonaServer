<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" minWidth="955" minHeight="600" applicationComplete="init()" >
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import flash.utils.getTimer;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			private var applicationDefault:String = null;
			private var hostDefault:String = null;
			
			[Bindable] public var arrayTests:ArrayCollection = new ArrayCollection();
			private var mapTests:Object = new Object();
			
			public var _currentIndex:int = 0;
			public var _timeStart:int = 0; // Time in msec when the test has been started
			
			private var _conn:NetConnection = null; // Connection to Mona for getting list of lua tests
			
			// Console functions
			public function INFO(message:String):void { console.htmlText += "<p><font color='#000000'>" + message + "</font></p>"; }
			public function SUCCESS(message:String):void { console.htmlText += "<p><b><font color='#00CC00'>" + message + "</font></b></p>"; }
			public function ERROR(message:String):void { console.htmlText += "<p><b><i><font color='#CC0000'>ERROR : " + message + "</font></i></b></p>"; }
			
			private function init():void {
				// Initiate parameters
				applicationDefault = FlexGlobals.topLevelApplication.parameters.pathname;
				hostDefault = FlexGlobals.topLevelApplication.parameters.host;
				
				listTests.enabled = false;
				btRun.enabled = false;
				
				INFO("Starting FunctionalTests from host http://" + hostDefault + applicationDefault);
				
				addTest(new HTTPLoad(this, hostDefault, applicationDefault));
				addTest(new HTTPReconnect(this, hostDefault, applicationDefault));
				addTest(new HTTPBadRequests(this, hostDefault));
				addTest(new HTTPAggregated(this, hostDefault, applicationDefault));
				addTest(new RTMPBadRequests(this, hostDefault));
				addTest(new DeserializationJSON(this, hostDefault, applicationDefault));
				addTest(new DeserializationXMLRPC(this, hostDefault, applicationDefault));
				addTest(new BigDeserialize(this, hostDefault, applicationDefault));
				
				_conn = new NetConnection();
				_conn.addEventListener(NetStatusEvent.NET_STATUS, onStatus);
				_conn.connect("rtmfp://"+hostDefault+applicationDefault);
				_conn.client = this;
			}
			
			private function addLUATest(name:String, index:int):void {
				arrayTests.addItem(name);
				mapTests[name] = index;
			}
			
			private function addTest(test:Test):void {
				arrayTests.addItem(test.testName);
				mapTests[test.testName] = test;
			}
			
			// Run selected tests
			private function run():void {
				
				listTests.enabled = false;
				btRun.enabled = false;
				_currentIndex = 0;
				runTest();
			}
			
			// Run current test
			private function runTest():void {
				var items:Array = listTests.selectedItems;
				
				if (_currentIndex < items.length) {
					var test:Object = mapTests[items[_currentIndex]];
					if (test is Test) { // AS3 Test
						var as3test:Test = test as Test;
						SUCCESS("Running " + as3test.testName + " (" + as3test.description + ")...");
						_timeStart = getTimer();
						as3test.run(asyncResult);
					} else if (test is int) { // LUA Test
						SUCCESS("Running " + items[_currentIndex] + "...");
						_timeStart = getTimer();
						_conn.call("runTest", new Responder(asyncResult), test as int);
					}
				}
				else {// End of tests!
					listTests.enabled = true;
					btRun.enabled = true;
				}
			}
			
			public function asyncResult(error:String):void {
				var items:Array = listTests.selectedItems;
				
				// Success => Go to next Test
				if (error == "") {
					SUCCESS("Test " + items[_currentIndex] + " OK (" + (getTimer()-_timeStart) + "ms)");
					_currentIndex += 1;
					runTest();
				} else {  // Error : End of tests!
					ERROR(error);
					listTests.enabled = true;
					btRun.enabled = true;
				}
			}
			
			private function onStatus(event:NetStatusEvent):void {
				switch(event.info.code) {
					case "NetConnection.Connect.Success":
						_conn.call("listTests",new Responder(onListTests));
						break;
					default:
						Alert.show(event.info.code);
				}
			}
			
			public function onListTests(list:Object):void {
				for (var name:String in list)
					addLUATest(name,list[name]);
				
				listTests.enabled = true;
				btRun.enabled = true;
			}
		]]>
	</fx:Script>	
	<mx:VBox x="10" y="10" width="935" height="580">
		<mx:HBox width="100%">
			<mx:TextArea id="console" width="720" height="518" editable="false" />
			<mx:List id="listTests" width="204" height="517" dataProvider="{arrayTests}" allowMultipleSelection="true"></mx:List>
		</mx:HBox>
		<mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button id="btRun" label="Run" click="run()"/>
		</mx:HBox>
	</mx:VBox>
</mx:Application>
